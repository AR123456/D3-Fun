{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","data","setData","svgRef","useRef","useEffect","svg","select","current","xScale","scaleBand","domain","map","value","index","range","padding","yScale","scaleLinear","colorScale","clamp","xAxis","axisBottom","ticks","length","style","call","yAxis","axisRight","selectAll","join","attr","bandwidth","transition","Fragment","ref","className","onClick","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oQA4FeA,MAtFf,WAAgB,IAAD,EACWC,mBAAS,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAD7C,mBACNC,EADM,KACAC,EADA,KAEPC,EAASC,mBAgEf,OA/DAC,qBAAU,WACR,IAAMC,EAAMC,YAAOJ,EAAOK,SACpBC,EAASC,cAKZC,OAAOV,EAAKW,KAAI,SAACC,EAAOC,GAAR,OAAkBA,MAClCC,MAAM,CAAC,EAAG,MAEVC,QAAQ,IACLC,EAASC,cAEZP,OAAO,CAAC,EAAG,MACXI,MAAM,CAAC,IAAK,IAETI,EAAaD,cAEhBP,OAAO,CAAC,GAAI,IAAK,MACjBI,MAAM,CAAC,QAAS,SAAU,QAC1BK,OAAM,GACHC,EAAQC,YAAWb,GAAQc,MAAMtB,EAAKuB,QAE5ClB,EACGC,OAAO,WACPkB,MAAM,YAAa,qBACnBC,KAAKL,GACR,IAAMM,EAAQC,YAAUX,GACxBX,EACGC,OAAO,WACPkB,MAAM,YAAa,qBACnBC,KAAKC,GAMRrB,EAEGuB,UAAU,QAEV5B,KAAKA,GAEL6B,KAAK,QAELC,KAAK,QAAS,OAGdN,MAAM,YAAa,cAEnBM,KAAK,KAAK,SAAClB,EAAOC,GAAR,OAAkBL,EAAOK,MAEnCiB,KAAK,KAAM,KAEXA,KAAK,QAAStB,EAAOuB,aAErBC,aAGAF,KAAK,OAAQZ,GAEbY,KAAK,UAAU,SAAAlB,GAAK,OAAI,IAAMI,EAAOJ,QACvC,CAACZ,IAEF,kBAAC,IAAMiC,SAAP,KACE,yBAAKC,IAAKhC,GACR,uBAAGiC,UAAU,WACb,uBAAGA,UAAU,YAEf,6BACA,6BACA,6BACA,6BACA,4BAAQC,QAAS,kBAAMnC,EAAQD,EAAKW,KAAI,SAAAC,GAAK,OAAIA,EAAQ,QAAzD,eAGA,4BAAQwB,QAAS,kBAAMnC,EAAQD,EAAKqC,QAAO,SAAAzB,GAAK,OAAIA,EAAQ,SAA5D,iBCzEc0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f9a708cf.chunk.js","sourcesContent":["// https://www.youtube.com/watch?v=LQHt0wr3ybw&t=2s\nimport React, { useRef, useEffect, useState } from \"react\";\nimport \"./App.css\";\n// axis bottom,linear scale and axis right\nimport { select, axisBottom, scaleLinear, axisRight, scaleBand } from \"d3\";\n\nfunction App() {\n  const [data, setData] = useState([25, 30, 45, 60, 20, 65, 75]);\n  const svgRef = useRef();\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const xScale = scaleBand()\n      //scaleBand takes the range and divides it into 5 equaldistant bands\n      // scale band maps abitrary values to a range of linier values in the range\n      // .domain([0, 1, 2, 3, 4, 5, 6])\n      // better way to write\n      .domain(data.map((value, index) => index))\n      .range([0, 300])\n      //outer and inner padding also adjusts the x axis\n      .padding(0.5);\n    const yScale = scaleLinear()\n      //linear range of input to linear range of input values\n      .domain([0, 150])\n      .range([150, 0]);\n    // colorizing the bars\n    const colorScale = scaleLinear()\n      //linear range of input to linear range of input values\n      .domain([75, 100, 150])\n      .range([\"green\", \"orange\", \"red\"])\n      .clamp(true);\n    const xAxis = axisBottom(xScale).ticks(data.length);\n\n    svg\n      .select(\".x-axis\")\n      .style(\"transform\", \"translateY(150px)\")\n      .call(xAxis);\n    const yAxis = axisRight(yScale);\n    svg\n      .select(\".y-axis\")\n      .style(\"transform\", \"translateX(300px)\")\n      .call(yAxis);\n\n    // drawing the bars for the bar chart\n    // the general update pattern of D3\n    //\n    //\n    svg\n      //select the bar class elements\n      .selectAll(\".bar\")\n      //syncronize with data array\n      .data(data)\n      // create a rect element for each piece of daata\n      .join(\"rect\")\n      // class bar attr to every entering and updating element in svg,  r elements update\n      .attr(\"class\", \"bar\")\n\n      // using a trick to flip them upside down on the y axis\n      .style(\"transform\", \"scale(1,-1\")\n      // position bars on the x axis, index value gets passed to the x scale\n      .attr(\"x\", (value, index) => xScale(index))\n      // transform values of the data array to their respective y values\n      .attr(\"y\", -150)\n      //add width to the rectangles 7 equaly wide bands\n      .attr(\"width\", xScale.bandwidth())\n      // adding animation with transition\n      .transition()\n      //adding height so we ca see the bars, have to do some math here so bars done fall off the bottom edge of graph\n      // adding custom colorization\n      .attr(\"fill\", colorScale)\n\n      .attr(\"height\", value => 150 - yScale(value));\n  }, [data]);\n  return (\n    <React.Fragment>\n      <svg ref={svgRef}>\n        <g className=\"x-axis\"></g>\n        <g className=\"y-axis\"></g>\n      </svg>\n      <br />\n      <br />\n      <br />\n      <br />\n      <button onClick={() => setData(data.map(value => value + 5))}>\n        Update data\n      </button>\n      <button onClick={() => setData(data.filter(value => value < 35))}>\n        Filter data\n      </button>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}