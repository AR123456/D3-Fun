{"version":3,"sources":["useResizeObserver.js","TreeChart.js","ForceTreeChart.js","App.js","serviceWorker.js","index.js"],"names":["useResizeObserver","ref","useState","dimensions","setDimensions","useEffect","observeTarget","current","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve","TreeChart","data","svgRef","useRef","wrapperRef","previouslyRenderedData","value","usePrevious","svg","select","root","hierarchy","treeLayout","tree","size","height","width","linkGenerator","linkHorizontal","x","link","y","enteringAndUpdatingLinks","selectAll","links","join","attr","length","this","getTotalLength","transition","duration","delay","source","depth","descendants","enter","append","node","text","name","style","marginBottom","ForceTreeChart","nodeData","linkData","simulation","forceSimulation","force","forceManyBody","strength","forceCollide","on","console","log","alpha","toFixed","target","mouse","forceX","forceY","restart","forceRadial","children","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0f0cb2e1.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\n/**\n * Hook, that returns the current dimensions of an HTML element.\n * Doesn't play well with SVG.\n */\n\nconst useResizeObserver = ref => {\n  const [dimensions, setDimensions] = useState(null);\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver(entries => {\n      entries.forEach(entry => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n\nexport default useResizeObserver;\n","import React, { useRef, useEffect } from \"react\";\nimport { select, hierarchy, tree, linkHorizontal } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\n\n/**\n * Hook, that returns the last used value.\n */\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\n/**\n * Component that renders a tree.\n */\n\nfunction TreeChart({ data }) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  // only save the old data if we rendered it (with dimensions)\n  // otherwise the data in useEffect is always equal.\n  // reason: we skip the initial render (with no dimensions, but data).\n  // (see line 27).\n  const previouslyRenderedData = usePrevious(dimensions ? data : null);\n\n  // will be called initially and on every data change\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    if (!dimensions) return;\n\n    // transform hierarchical data\n    const root = hierarchy(data);\n    const treeLayout = tree().size([dimensions.height, dimensions.width]);\n\n    const linkGenerator = linkHorizontal()\n      .x(link => link.y)\n      .y(link => link.x);\n\n    // enrich hierarchical data with coordinates\n    treeLayout(root);\n\n    // links\n    const enteringAndUpdatingLinks = svg\n      .selectAll(\".link\")\n      .data(root.links())\n      .join(\"path\")\n      .attr(\"class\", \"link\")\n      .attr(\"d\", linkGenerator)\n      .attr(\"stroke-dasharray\", function() {\n        const length = this.getTotalLength();\n        return `${length} ${length}`;\n      })\n      .attr(\"stroke\", \"black\")\n      .attr(\"fill\", \"none\")\n      .attr(\"opacity\", 1);\n\n    if (data !== previouslyRenderedData) {\n      enteringAndUpdatingLinks\n        .attr(\"stroke-dashoffset\", function() {\n          return this.getTotalLength();\n        })\n        .transition()\n        .duration(500)\n        .delay(link => link.source.depth * 500)\n        .attr(\"stroke-dashoffset\", 0);\n    }\n\n    // nodes\n    svg\n      .selectAll(\".node\")\n      .data(root.descendants())\n      .join(enter => enter.append(\"circle\").attr(\"opacity\", 0))\n      .attr(\"class\", \"node\")\n      .attr(\"cx\", node => node.y)\n      .attr(\"cy\", node => node.x)\n      .attr(\"r\", 4)\n      .transition()\n      .duration(500)\n      .delay(node => node.depth * 300)\n      .attr(\"opacity\", 1);\n\n    // labels\n    svg\n      .selectAll(\".label\")\n      .data(root.descendants())\n      .join(enter => enter.append(\"text\").attr(\"opacity\", 0))\n      .attr(\"class\", \"label\")\n      .attr(\"x\", node => node.y)\n      .attr(\"y\", node => node.x - 12)\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"font-size\", 24)\n      .text(node => node.data.name)\n      .transition()\n      .duration(500)\n      .delay(node => node.depth * 300)\n      .attr(\"opacity\", 1);\n  }, [data, dimensions, previouslyRenderedData]);\n\n  return (\n    <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\n      <svg ref={svgRef}></svg>\n    </div>\n  );\n}\n\nexport default TreeChart;\n","// link to you tube https://www.youtube.com/watch?v=J81Hghazii8\n\nimport React, { useRef, useEffect } from \"react\";\nimport {\n  select,\n  hierarchy,\n  forceSimulation,\n  forceManyBody,\n  mouse,\n  forceX,\n  forceY,\n  forceCollide,\n  forceRadial\n} from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\n\n/**\n * Component, that renders a force layout for hierarchical data.\n */\n\nfunction ForceTreeChart({ data }) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  // will be called initially and on every data change\n  useEffect(() => {\n    if (!dimensions) return;\n    const svg = select(svgRef.current);\n\n    // centering workaround\n    svg.attr(\"viewBox\", [\n      -dimensions.width / 2,\n      -dimensions.height / 2,\n      dimensions.width,\n      dimensions.height\n    ]);\n\n    // d3 util to work with hierarchical data\n    const root = hierarchy(data);\n    const nodeData = root.descendants();\n    const linkData = root.links();\n\n    const simulation = forceSimulation(nodeData)\n      .force(\"charge\", forceManyBody().strength(-30))\n      .force(\"collide\", forceCollide(30))\n      .on(\"tick\", () => {\n        console.log(\"current force\", simulation.alpha());\n\n        // current alpha text\n        svg\n          .selectAll(\".alpha\")\n          .data([data])\n          .join(\"text\")\n          .attr(\"class\", \"alpha\")\n          .text(simulation.alpha().toFixed(2))\n          .attr(\"x\", -dimensions.width / 2 + 10)\n          .attr(\"y\", -dimensions.height / 2 + 25);\n\n        // links\n        svg\n          .selectAll(\".link\")\n          .data(linkData)\n          .join(\"line\")\n          .attr(\"class\", \"link\")\n          .attr(\"stroke\", \"black\")\n          .attr(\"fill\", \"none\")\n          .attr(\"x1\", link => link.source.x)\n          .attr(\"y1\", link => link.source.y)\n          .attr(\"x2\", link => link.target.x)\n          .attr(\"y2\", link => link.target.y);\n\n        // nodes\n        svg\n          .selectAll(\".node\")\n          .data(nodeData)\n          .join(\"circle\")\n          .attr(\"class\", \"node\")\n          .attr(\"r\", 4)\n          .attr(\"cx\", node => node.x)\n          .attr(\"cy\", node => node.y);\n\n        // labels\n        svg\n          .selectAll(\".label\")\n          .data(nodeData)\n          .join(\"text\")\n          .attr(\"class\", \"label\")\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", 20)\n          .text(node => node.data.name)\n          .attr(\"x\", node => node.x)\n          .attr(\"y\", node => node.y);\n      });\n\n    svg.on(\"mousemove\", () => {\n      const [x, y] = mouse(svgRef.current);\n      simulation\n        .force(\n          \"x\",\n          forceX(x).strength(node => 0.2 + node.depth * 0.15)\n        )\n        .force(\n          \"y\",\n          forceY(y).strength(node => 0.2 + node.depth * 0.15)\n        );\n    });\n\n    svg.on(\"click\", () => {\n      const [x, y] = mouse(svgRef.current);\n      simulation\n        .alpha(0.5)\n        .restart()\n        .force(\"orbit\", forceRadial(100, x, y).strength(0.8));\n\n      // render a circle to show radial force\n      svg\n        .selectAll(\".orbit\")\n        .data([data])\n        .join(\"circle\")\n        .attr(\"class\", \"orbit\")\n        .attr(\"stroke\", \"green\")\n        .attr(\"fill\", \"none\")\n        .attr(\"r\", 100)\n        .attr(\"cx\", x)\n        .attr(\"cy\", y);\n    });\n  }, [data, dimensions]);\n\n  return (\n    <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\n      <svg ref={svgRef}></svg>\n    </div>\n  );\n}\n\nexport default ForceTreeChart;\n","import React from \"react\";\nimport TreeChart from \"./TreeChart\";\nimport ForceTreeChart from \"./ForceTreeChart\";\n// import Video from \"./Video\";\nimport \"./App.css\";\n\nconst data = {\n  name: \"😐\",\n  children: [\n    {\n      name: \"🙂\",\n      children: [\n        {\n          name: \"😀\"\n        },\n        {\n          name: \"😁\"\n        },\n        {\n          name: \"🤣\"\n        }\n      ]\n    },\n    {\n      name: \"😔\"\n    }\n  ]\n};\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <h2>🪐 D3 Force Layout</h2>\n      <ForceTreeChart data={data} />\n      <h2>Animated Tree Chart</h2>\n      <TreeChart data={data} />\n      {/* <Video /> */}\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}