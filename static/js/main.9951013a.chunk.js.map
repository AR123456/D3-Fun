{"version":3,"sources":["useResizeObserver.js","RacingBarChart.js","useInterval.js","App.js","serviceWorker.js","index.js"],"names":["useResizeObserver","ref","useState","dimensions","setDimensions","useEffect","observeTarget","current","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve","RacingBarChart","data","svgRef","useRef","wrapperRef","svg","select","sort","a","b","value","yScale","scaleBand","paddingInner","domain","map","index","range","height","xScale","scaleLinear","max","width","selectAll","name","join","enter","append","attr","color","bandwidth","transition","text","style","marginBottom","useInterval","callback","delay","savedCallback","id","setInterval","clearInterval","getRandomIndex","array","Math","floor","length","random","App","iteration","setIteration","start","setStart","setData","randomIndex","Fragment","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9951013a.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\nconst useResizeObserver = ref => {\n  const [dimensions, setDimensions] = useState(null);\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver(entries => {\n      entries.forEach(entry => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n\nexport default useResizeObserver;\n","import React, { useRef, useEffect } from \"react\";\nimport { select, scaleBand, scaleLinear, max } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\n\nfunction RacingBarChart({ data }) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  // will be called initially and on every data change\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    if (!dimensions) return;\n\n    // sorting the data\n    data.sort((a, b) => b.value - a.value);\n\n    const yScale = scaleBand()\n      .paddingInner(0.1)\n      .domain(data.map((value, index) => index)) // [0,1,2,3,4,5]\n      .range([0, dimensions.height]); // [0, 200]\n\n    const xScale = scaleLinear()\n      .domain([0, max(data, entry => entry.value)]) // [0, 65 (example)]\n      .range([0, dimensions.width]); // [0, 400 (example)]\n\n    // draw the bars\n    svg\n      .selectAll(\".bar\")\n      .data(data, (entry, index) => entry.name)\n      .join(enter =>\n        enter.append(\"rect\").attr(\"y\", (entry, index) => yScale(index))\n      )\n      .attr(\"fill\", entry => entry.color)\n      .attr(\"class\", \"bar\")\n      .attr(\"x\", 0)\n      .attr(\"height\", yScale.bandwidth())\n      .transition()\n      .attr(\"width\", entry => xScale(entry.value))\n      .attr(\"y\", (entry, index) => yScale(index));\n\n    // draw the labels\n    svg\n      .selectAll(\".label\")\n      .data(data, (entry, index) => entry.name)\n      .join(enter =>\n        enter\n          .append(\"text\")\n          .attr(\n            \"y\",\n            (entry, index) => yScale(index) + yScale.bandwidth() / 2 + 5\n          )\n      )\n      .text(entry => `🐎 ... ${entry.name} (${entry.value} meters)`)\n      .attr(\"class\", \"label\")\n      .attr(\"x\", 10)\n      .transition()\n      .attr(\"y\", (entry, index) => yScale(index) + yScale.bandwidth() / 2 + 5);\n  }, [data, dimensions]);\n\n  return (\n    <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\n      <svg ref={svgRef}></svg>\n    </div>\n  );\n}\n\nexport default RacingBarChart;\n","import { useEffect, useRef } from \"react\";\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;\n","import React, { useState } from \"react\";\nimport RacingBarChart from \"./RacingBarChart\";\nimport useInterval from \"./useInterval\";\nimport \"./App.css\";\n\nconst getRandomIndex = array => {\n  return Math.floor(array.length * Math.random());\n};\n\nfunction App() {\n  const [iteration, setIteration] = useState(0);\n  const [start, setStart] = useState(false);\n  const [data, setData] = useState([\n    {\n      name: \"alpha\",\n      value: 10,\n      color: \"#f4efd3\"\n    },\n    {\n      name: \"beta\",\n      value: 15,\n      color: \"#cccccc\"\n    },\n    {\n      name: \"charlie\",\n      value: 20,\n      color: \"#c2b0c9\"\n    },\n    {\n      name: \"delta\",\n      value: 25,\n      color: \"#9656a1\"\n    },\n    {\n      name: \"echo\",\n      value: 30,\n      color: \"#fa697c\"\n    },\n    {\n      name: \"foxtrot\",\n      value: 35,\n      color: \"#fcc169\"\n    }\n  ]);\n\n  useInterval(() => {\n    if (start) {\n      const randomIndex = getRandomIndex(data);\n      setData(\n        data.map((entry, index) =>\n          index === randomIndex\n            ? {\n                ...entry,\n                value: entry.value + 10\n              }\n            : entry\n        )\n      );\n      setIteration(iteration + 1);\n    }\n  }, 500);\n\n  return (\n    <React.Fragment>\n      <h1>Racing Bar Chart</h1>\n      <RacingBarChart data={data} />\n      <button onClick={() => setStart(!start)}>\n        {start ? \"Stop the race\" : \"Start the race!\"}\n      </button>\n      <p>Iteration: {iteration}</p>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}