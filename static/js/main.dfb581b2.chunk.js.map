{"version":3,"sources":["useResizeObserver.js","BBTimeline.js","App.js","serviceWorker.js","index.js"],"names":["useResizeObserver","ref","useState","dimensions","setDimensions","useEffect","observeTarget","current","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve","getDate","dateString","date","split","Date","BBTimeline","data","highlight","svgRef","useRef","wrapperRef","svg","select","minDate","min","episode","air_date","maxDate","max","xScale","scaleTime","domain","range","width","yScale","scaleLinear","characters","length","height","selectAll","join","attr","includes","xAxis","axisBottom","style","call","marginBottom","className","App","bbEpisodes","setBbEpisodes","bbCharacters","setBbCharacters","setHighlight","fetch","then","response","ok","json","sort","a","b","name","localeCompare","catch","console","error","episodes","warn","Fragment","value","onChange","e","target","map","character","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dfb581b2.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport ResizeObserver from \"resize-observer-polyfill\";\r\n\r\nconst useResizeObserver = ref => {\r\n  const [dimensions, setDimensions] = useState(null);\r\n  useEffect(() => {\r\n    const observeTarget = ref.current;\r\n    const resizeObserver = new ResizeObserver(entries => {\r\n      entries.forEach(entry => {\r\n        setDimensions(entry.contentRect);\r\n      });\r\n    });\r\n    resizeObserver.observe(observeTarget);\r\n    return () => {\r\n      resizeObserver.unobserve(observeTarget);\r\n    };\r\n  }, [ref]);\r\n  return dimensions;\r\n};\r\n\r\nexport default useResizeObserver;\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport { select, min, max, scaleTime, scaleLinear, axisBottom } from \"d3\";\r\nimport useResizeObserver from \"./useResizeObserver\";\r\n\r\nconst getDate = dateString => {\r\n  const date = dateString.split(\"-\");\r\n  return new Date(date[2], date[0] - 1, date[1]);\r\n};\r\nfunction BBTimeline({ data, highlight }) {\r\n  const svgRef = useRef();\r\n  const wrapperRef = useRef();\r\n  const dimensions = useResizeObserver(wrapperRef);\r\n  // will be called initally and on every data change\r\n  useEffect(() => {\r\n    const svg = select(svgRef.current);\r\n    if (!dimensions) return;\r\n    const minDate = min(data, episode => getDate(episode.air_date));\r\n    const maxDate = max(data, episode => getDate(episode.air_date));\r\n\r\n    const xScale = scaleTime()\r\n      .domain([minDate, maxDate])\r\n      .range([0, dimensions.width]);\r\n    const yScale = scaleLinear()\r\n      .domain([max(data, episode => episode.characters.length), 0])\r\n      .range([0, dimensions.height]);\r\n\r\n    svg\r\n      .selectAll(\".episode\")\r\n      .data(data)\r\n      .join(\"line\")\r\n      .attr(\"class\", \"episode\")\r\n      .attr(\"stroke\", episode =>\r\n        episode.characters.includes(highlight) ? \"blue\" : \"black\"\r\n      )\r\n      .attr(\"x1\", episode => xScale(getDate(episode.air_date)))\r\n      .attr(\"y1\", dimensions.height)\r\n      .attr(\"x2\", episode => xScale(getDate(episode.air_date)))\r\n      .attr(\"y2\", episode => yScale(episode.characters.length));\r\n\r\n    const xAxis = axisBottom(xScale);\r\n    svg\r\n      .select(\".x-axis\")\r\n      .style(\"transform\", `translateY(${dimensions.height}px)`)\r\n      .call(xAxis);\r\n  }, [data, dimensions, highlight]);\r\n  return (\r\n    <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\r\n      <svg ref={svgRef}>\r\n        <g className=\"x-axis\" />\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\nexport default BBTimeline;\r\n","import React, { useEffect, useState } from \"react\";\nimport BBTimeline from \"./BBTimeline\";\nimport \"./App.css\";\n\nfunction App() {\n  const [bbEpisodes, setBbEpisodes] = useState([]);\n  const [bbCharacters, setBbCharacters] = useState([]);\n  const [highlight, setHighlight] = useState();\n\n  useEffect(() => {\n    fetch(\"https://www.breakingbadapi.com/api/characters?category=Breaking+Bad\")\n      .then(response => response.ok && response.json())\n      .then(characters => {\n        setBbCharacters(\n          characters.sort((a, b) => a.name.localeCompare(b.name))\n        );\n      })\n      .catch(console.error);\n  }, []);\n\n  useEffect(() => {\n    fetch(\"https://www.breakingbadapi.com/api/episodes?series=Breaking+Bad\")\n      .then(response => response.ok && response.json())\n      .then(episodes => {\n        console.warn(episodes);\n        setBbEpisodes(episodes);\n      })\n      .catch(console.error);\n  }, []);\n\n  return (\n    <React.Fragment>\n      <h1>Breaking Bad Timeline</h1>\n      <BBTimeline highlight={highlight} data={bbEpisodes} />\n\n      <h2>Select your character</h2>\n      <select value={highlight} onChange={e => setHighlight(e.target.value)}>\n        <option>Select character</option>\n        {bbCharacters.map(character => (\n          <option key={character.name}>{character.name}</option>\n        ))}\n      </select>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}