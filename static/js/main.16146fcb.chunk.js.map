{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","data","setData","svgRef","useRef","useEffect","svg","select","current","xScale","scaleBand","domain","map","value","index","range","padding","yScale","scaleLinear","colorScale","clamp","xAxis","axisBottom","ticks","length","style","call","yAxis","axisRight","selectAll","join","attr","bandwidth","on","enter","append","text","transition","remove","Fragment","ref","className","onClick","filter","Math","round","random","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4QAsGeA,MAjGf,WAAgB,IAAD,EACWC,mBAAS,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAD7C,mBACNC,EADM,KACAC,EADA,KAEPC,EAASC,mBAwEf,OAvEAC,qBAAU,WACR,IAAMC,EAAMC,YAAOJ,EAAOK,SACpBC,EAASC,cACZC,OAAOV,EAAKW,KAAI,SAACC,EAAOC,GAAR,OAAkBA,MAClCC,MAAM,CAAC,EAAG,MACVC,QAAQ,IACLC,EAASC,cACZP,OAAO,CAAC,EAAG,MACXI,MAAM,CAAC,IAAK,IACTI,EAAaD,cAChBP,OAAO,CAAC,GAAI,IAAK,MACjBI,MAAM,CAAC,QAAS,SAAU,QAC1BK,OAAM,GACHC,EAAQC,YAAWb,GAAQc,MAAMtB,EAAKuB,QAC5ClB,EACGC,OAAO,WACPkB,MAAM,YAAa,qBACnBC,KAAKL,GACR,IAAMM,EAAQC,YAAUX,GACxBX,EACGC,OAAO,WACPkB,MAAM,YAAa,qBACnBC,KAAKC,GAERrB,EACGuB,UAAU,QACV5B,KAAKA,GACL6B,KAAK,QACLC,KAAK,QAAS,OACdN,MAAM,YAAa,cACnBM,KAAK,KAAK,SAAClB,EAAOC,GAAR,OAAkBL,EAAOK,MACnCiB,KAAK,KAAM,KACXA,KAAK,QAAStB,EAAOuB,aAIrBC,GAAG,cAAc,SAACpB,EAAOC,GAGxBR,EACGuB,UAAU,YACV5B,KAAK,CAACY,IAINiB,MAAK,SAAAI,GAAK,OAAIA,EAAMC,OAAO,QAAQJ,KAAK,IAAKd,EAAOJ,GAAS,MAE7DkB,KAAK,QAAS,WAEdK,KAAKvB,GAILkB,KAAK,IAAKtB,EAAOK,GAASL,EAAOuB,YAAc,GAI/CD,KAAK,cAAe,UACpBM,aAGAN,KAAK,IAAKd,EAAOJ,GAAS,GAE1BkB,KAAK,UAAW,MAGpBE,GAAG,cAAc,kBAAM3B,EAAIC,OAAO,YAAY+B,YAC9CD,aACAN,KAAK,OAAQZ,GACbY,KAAK,UAAU,SAAAlB,GAAK,OAAI,IAAMI,EAAOJ,QACvC,CAACZ,IAEF,kBAAC,IAAMsC,SAAP,KACE,yBAAKC,IAAKrC,GACR,uBAAGsC,UAAU,WACb,uBAAGA,UAAU,YAGf,4BAAQC,QAAS,kBAAMxC,EAAQD,EAAKW,KAAI,SAAAC,GAAK,OAAIA,EAAQ,QAAzD,eAGA,4BAAQ6B,QAAS,kBAAMxC,EAAQD,EAAK0C,QAAO,SAAA9B,GAAK,OAAIA,EAAQ,SAA5D,eAGA,4BAEE6B,QAAS,kBAAMxC,EAAQ,GAAD,mBAAKD,GAAL,CAAW2C,KAAKC,MAAsB,IAAhBD,KAAKE,eAFnD,cChFcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.16146fcb.chunk.js","sourcesContent":["// https://www.youtube.com/watch?v=BS5VU0gFgE0\nimport React, { useRef, useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { select, axisBottom, scaleLinear, axisRight, scaleBand } from \"d3\";\n\nfunction App() {\n  const [data, setData] = useState([25, 30, 45, 60, 20, 65, 75]);\n  const svgRef = useRef();\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const xScale = scaleBand()\n      .domain(data.map((value, index) => index))\n      .range([0, 300])\n      .padding(0.5);\n    const yScale = scaleLinear()\n      .domain([0, 150])\n      .range([150, 0]);\n    const colorScale = scaleLinear()\n      .domain([75, 100, 150])\n      .range([\"green\", \"orange\", \"red\"])\n      .clamp(true);\n    const xAxis = axisBottom(xScale).ticks(data.length);\n    svg\n      .select(\".x-axis\")\n      .style(\"transform\", \"translateY(150px)\")\n      .call(xAxis);\n    const yAxis = axisRight(yScale);\n    svg\n      .select(\".y-axis\")\n      .style(\"transform\", \"translateX(300px)\")\n      .call(yAxis);\n    // draw the bars\n    svg\n      .selectAll(\".bar\")\n      .data(data)\n      .join(\"rect\")\n      .attr(\"class\", \"bar\")\n      .style(\"transform\", \"scale(1,-1\")\n      .attr(\"x\", (value, index) => xScale(index))\n      .attr(\"y\", -150)\n      .attr(\"width\", xScale.bandwidth())\n      // add the text on hover- pass into \"on\", it is important to do this before the transition\n      // define handler function that recives the value and index of the current bar.\n\n      .on(\"mouseenter\", (value, index) => {\n        // with the selected argument tell D3 I want to....\n        // with every mouse enter select the elements with calss tooltip and sync with data passed in IE the value of the bar\n        svg\n          .selectAll(\".tooltip\")\n          .data([value])\n          // create new text element for each piece of data\n          // .join(\"text\")\n          // updating this to  a join so that the y transiiton from the top is more subtel\n          .join(enter => enter.append(\"text\").attr(\"y\", yScale(value) - 4))\n          // add attr so tooltip can update\n          .attr(\"class\", \"tooltip\")\n          // define content of the element to be the value of the bar\n          .text(value)\n          // postiion the text on the x axis\n          // getting the value of index from the on mounseenter not the index of the xscale above it.  that index ref to the element in the data array. we need the index of the element in the data array\n          // adding 1/2 of the width of element to help with centering text over SVG  as data changes\n          .attr(\"x\", xScale(index) + xScale.bandwidth() / 2)\n\n          // center the text on top of the bar\n          // this centers on top of left edge- need to do one more step - add 1/2 the width of the x scale so this moves over\n          .attr(\"text-anchor\", \"middle\")\n          .transition()\n          //now position the text on the y axis- puts text on top of bar,  the d-8 adds a bit of margin\n          // putting this under transition to it looks nice as well\n          .attr(\"y\", yScale(value) - 8)\n          // transition the opacity of the text element when it comes in\n          .attr(\"opacity\", 1);\n      })\n      //need to remove the transition onmouse leave so that effects can be applyed to next element hovered over\n      .on(\"mouseleave\", () => svg.select(\".tooltip\").remove())\n      .transition()\n      .attr(\"fill\", colorScale)\n      .attr(\"height\", value => 150 - yScale(value));\n  }, [data]);\n  return (\n    <React.Fragment>\n      <svg ref={svgRef}>\n        <g className=\"x-axis\"></g>\n        <g className=\"y-axis\"></g>\n      </svg>\n\n      <button onClick={() => setData(data.map(value => value + 5))}>\n        Update data\n      </button>\n      <button onClick={() => setData(data.filter(value => value < 35))}>\n        Filter data\n      </button>\n      <button\n        //add data to the chart randomly\n        onClick={() => setData([...data, Math.round(Math.random() * 100)])}\n      >\n        Add data\n      </button>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}