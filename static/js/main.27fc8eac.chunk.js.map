{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","data","setData","svgRef","useRef","useEffect","svg","select","current","xScale","scaleLinear","domain","length","range","yScale","xAxis","axisBottom","ticks","tickFormat","index","style","call","yAxis","axisRight","myLine","line","x","value","y","curve","curveCardinal","selectAll","join","attr","Fragment","ref","className","onClick","map","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wQAkFeA,MArEf,WAAgB,IAAD,EACWC,mBAAS,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAD7C,mBACNC,EADM,KACAC,EADA,KAEPC,EAASC,mBA+Cf,OA7CAC,qBAAU,WACR,IAAMC,EAAMC,YAAOJ,EAAOK,SACpBC,EAASC,cAEZC,OAAO,CAAC,EAAGV,EAAKW,OAAS,IAEzBC,MAAM,CAAC,EAAG,MAEPC,EAASJ,cACZC,OAAO,CAAC,EAAG,MACXE,MAAM,CAAC,IAAK,IAGTE,EAAQC,YAAWP,GACtBQ,MAAMhB,EAAKW,QAEXM,YAAW,SAAAC,GAAK,OAAIA,EAAQ,KAC/Bb,EACGC,OAAO,WAEPa,MAAM,YAAa,qBACnBC,KAAKN,GACR,IAAMO,EAAQC,YAAUT,GACxBR,EAEGC,OAAO,WACPa,MAAM,YAAa,qBACnBC,KAAKC,GAER,IAAME,EAASC,cAEZC,GAAE,SAACC,EAAOR,GAAR,OAAkBV,EAAOU,MAC3BS,EAAEd,GACFe,MAAMC,KAGTxB,EACGyB,UAAU,SACV9B,KAAK,CAACA,IACN+B,KAAK,QACLC,KAAK,QAAS,QACdA,KAAK,IAAKT,GACVS,KAAK,OAAQ,QACbA,KAAK,SAAU,UACjB,CAAChC,IAEF,kBAAC,IAAMiC,SAAP,KACE,yBAAKC,IAAKhC,GACR,uBAAGiC,UAAU,WACb,uBAAGA,UAAU,YAEf,6BACA,6BACA,6BACA,6BACA,4BAAQC,QAAS,kBAAMnC,EAAQD,EAAKqC,KAAI,SAAAX,GAAK,OAAIA,EAAQ,QAAzD,eAGA,4BAAQU,QAAS,kBAAMnC,EAAQD,EAAKsC,QAAO,SAAAZ,GAAK,OAAIA,EAAQ,SAA5D,iBC/Dca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.27fc8eac.chunk.js","sourcesContent":["// https://www.youtube.com/watch?v=yhwHUmjqxQw\nimport React, { useRef, useEffect, useState } from \"react\";\nimport \"./App.css\";\n// axis bottom,linear scale and axis right\nimport {\n  select,\n  line,\n  curveCardinal,\n  axisBottom,\n  scaleLinear,\n  axisRight\n} from \"d3\";\n\nfunction App() {\n  const [data, setData] = useState([25, 30, 45, 60, 20, 65, 75]);\n  const svgRef = useRef();\n  // ////use effect will be called initially an don every data change\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const xScale = scaleLinear()\n      // the domain is the input values, need to scale up or down, range of index values\n      .domain([0, data.length - 1])\n      // also visual representation of data\n      .range([0, 300]);\n    // a function from d3 needs domain- input values and range - output values\n    const yScale = scaleLinear()\n      .domain([0, 150])\n      .range([150, 0]);\n    // takes in scale to use- a function helper that transforms an input value to something that is needed. Ususaly for the visual representation for that value\n    // pass in the xScale defined previously\n    const xAxis = axisBottom(xScale)\n      .ticks(data.length)\n      // formating the x axi to show 1-7\n      .tickFormat(index => index + 1);\n    svg\n      .select(\".x-axis\")\n      // making use of the g or group with class name x-axis down in the return.\n      .style(\"transform\", \"translateY(150px)\")\n      .call(xAxis);\n    const yAxis = axisRight(yScale);\n    svg\n      // making use of the g or group with class name y-axis down in the return.\n      .select(\".y-axis\")\n      .style(\"transform\", \"translateX(300px)\")\n      .call(yAxis);\n    ////// generates the \"d\" attribute of a path element ////////////////\n    const myLine = line()\n      //scale to use in visual representation of the data, pass the index value into the scale\n      .x((value, index) => xScale(index))\n      .y(yScale)\n      .curve(curveCardinal);\n    ///// renders path element, and attaches\n    ///// the \"d\" attribute from line generator abobe\n    svg\n      .selectAll(\".line\")\n      .data([data])\n      .join(\"path\")\n      .attr(\"class\", \"line\")\n      .attr(\"d\", myLine)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"blue\");\n  }, [data]);\n  return (\n    <React.Fragment>\n      <svg ref={svgRef}>\n        <g className=\"x-axis\"></g>\n        <g className=\"y-axis\"></g>\n      </svg>\n      <br />\n      <br />\n      <br />\n      <br />\n      <button onClick={() => setData(data.map(value => value + 5))}>\n        Update data\n      </button>\n      <button onClick={() => setData(data.filter(value => value < 35))}>\n        Filter data\n      </button>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}