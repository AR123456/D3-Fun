{"version":3,"sources":["useResizeObserver.js","GeoChart.js","App.js","serviceWorker.js","index.js"],"names":["useResizeObserver","ref","useState","dimensions","setDimensions","useEffect","observeTarget","current","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve","GeoChart","data","property","svgRef","useRef","wrapperRef","selectedCountry","setSelectedCountry","svg","select","minProp","min","features","feature","properties","maxProp","max","colorScale","scaleLinear","domain","range","getBoundingClientRect","width","height","projection","geoMercator","fitSize","precision","pathGenerator","geoPath","selectAll","join","on","attr","transition","text","name","toLocaleString","style","marginBottom","App","setProperty","Fragment","value","onChange","event","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ylojBAyBeA,EAjBW,SAAAC,GAAQ,IAAD,EACKC,mBAAS,MADd,mBACxBC,EADwB,KACZC,EADY,KAc/B,OAZAC,qBAAU,WACR,IAAMC,EAAgBL,EAAIM,QACpBC,EAAiB,IAAIC,KAAe,SAAAC,GACxCA,EAAQC,SAAQ,SAAAC,GACdR,EAAcQ,EAAMC,mBAIxB,OADAL,EAAeM,QAAQR,GAChB,WACLE,EAAeO,UAAUT,MAE1B,CAACL,IACGE,GC+DMa,MAzEf,YAAuC,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,SAClBC,EAASC,mBACTC,EAAaD,mBACbjB,EAAaH,EAAkBqB,GAHD,EAIUnB,mBAAS,MAJnB,mBAI7BoB,EAJ6B,KAIZC,EAJY,KAkEpC,OA3DAlB,qBAAU,WACR,IAAMmB,EAAMC,YAAON,EAAOZ,SAEpBmB,EAAUC,YAAIV,EAAKW,UAAU,SAAAC,GAAO,OAAIA,EAAQC,WAAWZ,MAC3Da,EAAUC,YAAIf,EAAKW,UAAU,SAAAC,GAAO,OAAIA,EAAQC,WAAWZ,MAC3De,EAAaC,cAChBC,OAAO,CAACT,EAASK,IACjBK,MAAM,CAAC,OAAQ,QAPJ,EAYZjC,GAAckB,EAAWd,QAAQ8B,wBAD3BC,EAXM,EAWNA,MAAOC,EAXD,EAWCA,OAITC,EAAaC,cAIhBC,QAAQ,CAACJ,EAAOC,GAASjB,GAAmBL,GAI5C0B,UAAU,KAIPC,EAAgBC,cAAUL,WAAWA,GAG3ChB,EACGsB,UAAU,YACV7B,KAAKA,EAAKW,UACVmB,KAAK,QACLC,GAAG,SAAS,SAAAnB,GACXN,EAAmBD,IAAoBO,EAAU,KAAOA,MAEzDoB,KAAK,QAAS,WACdC,aACAD,KAAK,QAAQ,SAAApB,GAAO,OAAII,EAAWJ,EAAQC,WAAWZ,OACtD+B,KAAK,KAAK,SAAApB,GAAO,OAAIe,EAAcf,MAGtCL,EACGsB,UAAU,UACV7B,KAAK,CAACK,IACNyB,KAAK,QACLE,KAAK,QAAS,SACdE,MACC,SAAAtB,GAAO,OACLA,GACAA,EAAQC,WAAWsB,KACjB,KACAvB,EAAQC,WAAWZ,GAAUmC,oBAElCJ,KAAK,IAAK,IACVA,KAAK,IAAK,MACZ,CAAChC,EAAMd,EAAYe,EAAUI,IAG9B,yBAAKrB,IAAKoB,EAAYiC,MAAO,CAAEC,aAAc,SAC3C,yBAAKtD,IAAKkB,M,cCtDDqC,MApBf,WAAgB,IAAD,EACmBtD,mBAAS,WAD5B,mBACNgB,EADM,KACIuC,EADJ,KAEb,OACE,kBAAC,IAAMC,SAAP,KACE,qDACA,kBAAC,EAAD,CAAUzC,KAAMA,EAAMC,SAAUA,IAChC,4DACA,4BACEyC,MAAOzC,EACP0C,SAAU,SAAAC,GAAK,OAAIJ,EAAYI,EAAMC,OAAOH,SAE5C,4BAAQA,MAAM,WAAd,cACA,4BAAQA,MAAM,YAAd,eACA,4BAAQA,MAAM,cAAd,UCPYI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.89b974ac.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\n/**\n * Hook, that returns the current dimensions of an HTML element.\n * Doesn't play well with SVG.\n */\n\nconst useResizeObserver = ref => {\n  const [dimensions, setDimensions] = useState(null);\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver(entries => {\n      entries.forEach(entry => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n\nexport default useResizeObserver;\n","import React, { useRef, useEffect, useState } from \"react\";\nimport {\n  select,\n  geoPath,\n  geoMercator,\n  geoOrthographic,\n  min,\n  max,\n  scaleLinear\n} from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\n\nfunction GeoChart({ data, property }) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n\n  // will be called initially and on every data change\n  useEffect(() => {\n    const svg = select(svgRef.current);\n\n    const minProp = min(data.features, feature => feature.properties[property]);\n    const maxProp = max(data.features, feature => feature.properties[property]);\n    const colorScale = scaleLinear()\n      .domain([minProp, maxProp])\n      .range([\"#ccc\", \"red\"]);\n\n    // use resized dimensions\n    // but fall back to getBoundingClientRect, if no dimensions yet.\n    const { width, height } =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    // projects geo-coordinates on a 2D plane\n    const projection = geoMercator()\n      // changing to globe\n      // const projection = geoOrthographic()\n      // the world\n      .fitSize([width, height], selectedCountry || data)\n      // the united states\n      // .fitSize([width, height], data.features[2])\n\n      .precision(100);\n\n    // takes geojson data,\n    // transforms that into the d attribute of a path element\n    const pathGenerator = geoPath().projection(projection);\n\n    // render each country\n    svg\n      .selectAll(\".country\")\n      .data(data.features)\n      .join(\"path\")\n      .on(\"click\", feature => {\n        setSelectedCountry(selectedCountry === feature ? null : feature);\n      })\n      .attr(\"class\", \"country\")\n      .transition()\n      .attr(\"fill\", feature => colorScale(feature.properties[property]))\n      .attr(\"d\", feature => pathGenerator(feature));\n\n    // render text\n    svg\n      .selectAll(\".label\")\n      .data([selectedCountry])\n      .join(\"text\")\n      .attr(\"class\", \"label\")\n      .text(\n        feature =>\n          feature &&\n          feature.properties.name +\n            \": \" +\n            feature.properties[property].toLocaleString()\n      )\n      .attr(\"x\", 10)\n      .attr(\"y\", 25);\n  }, [data, dimensions, property, selectedCountry]);\n\n  return (\n    <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\n      <svg ref={svgRef}></svg>\n    </div>\n  );\n}\n\nexport default GeoChart;\n","import React, { useState } from \"react\";\n// import Video from \"./Video\";\nimport GeoChart from \"./GeoChart\";\nimport data from \"./GeoChart.world.geo.json\";\nimport \"./App.css\";\n\nfunction App() {\n  const [property, setProperty] = useState(\"pop_est\");\n  return (\n    <React.Fragment>\n      <h2>World Map with d3-geo</h2>\n      <GeoChart data={data} property={property} />\n      <h2>Select property to highlight</h2>\n      <select\n        value={property}\n        onChange={event => setProperty(event.target.value)}\n      >\n        <option value=\"pop_est\">Population</option>\n        <option value=\"name_len\">Name length</option>\n        <option value=\"gdp_md_est\">GDP</option>\n      </select>\n      {/* <Video /> */}\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}